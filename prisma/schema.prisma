generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Permission {
  id          String             @id @default(uuid())
  name        String             @unique
  value       String
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  roles       PermissionOnRole[]
}

model Role {
  id          String             @id @default(uuid())
  name        String             @unique
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions PermissionOnRole[]
  users       UserOnRole[]
}

model PermissionOnRole {
  id           String     @id @default(uuid())
  permissionId String
  roleId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model User {
  id            String         @id @default(uuid())
  fullName      String
  email         String         @unique
  password      String
  phoneNumber   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        Image[]
  refreshTokens RefreshToken[]
  teams         TeamOnUser[]
  roles         UserOnRole[]
}

model UserOnRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id             String           @id @default(uuid())
  name           String           @unique
  slug           String           @unique
  description    String
  sku            String           @unique
  salePrice      String
  price          String
  isSale         Boolean
  quantity       Int
  attributes     Json
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  about          String
  images         Image[]
  orders         OrderOnProduct[]
  variants       ProductVariant[]
  reviews        Review[]
  stockHistories StockHistory[]
}

model Image {
  id          String     @id @default(uuid())
  url         String
  alt         String
  productId   String?
  userId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  billBoardId String?
  billBoards  BillBoard? @relation(fields: [billBoardId], references: [id], onDelete: Cascade)
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  address     String
  city        String
  district    String
  email       String
  fullName    String
  note        String
  phoneNumber String
  ward        String
  status      Int
  payment     Int
  products    OrderOnProduct[]
}

model OrderOnProduct {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  rating    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  downVote  Int
  upVote    Int
  author    String
  color     String
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id         String   @id @default(uuid())
  productId  String
  attributes Json
  price      Float
  sku        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
}

model StockHistory {
  id        String   @id @default(uuid())
  productId String
  change    Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model BillBoard {
  id        String   @id @default(uuid())
  title     String
  content   String
  link      String
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Image[]
}

model Policy {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  suffix    String
}

model Team {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamOnUser[]
}

model TeamOnUser {
  id          String   @id @default(uuid())
  teamId      String
  userId      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  team        Team     @relation(fields: [teamId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Collection {
  id          String                 @id @default(uuid())
  content     String
  title       String
  desc        String
  dateTime    String
  color       String
  chapter     Int @unique
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  exhibitions CollectionExhibition[]
}

model CollectionExhibition {
  id           String     @id @default(uuid())
  collectionId String
  title        String
  desccription String
  image        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
}
