// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Permission {
  id          String             @id @default(uuid())
  name        String             @unique
  value       String
  description String
  roles       PermissionOnRole[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Role {
  id          String             @id @default(uuid())
  name        String             @unique
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions PermissionOnRole[]
  users       UserOnRole[]
}

model PermissionOnRole {
  id           String     @id @default(uuid())
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model User {
  id            String         @id @default(uuid())
  fullName      String
  email         String         @unique
  password      String
  phoneNumber   String
  images        Image[]
  roles         UserOnRole[]
  refreshTokens RefreshToken[]
  teams         TeamOnUser[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserOnRole {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String           @id @default(uuid())
  name           String           @unique
  slug           String           @unique
  description    String
  about          String
  sku            String           @unique
  salePrice      String
  price          String
  isSale         Boolean
  quantity       Int
  attributes     Json
  images         Image[]
  orders         OrderOnProduct[]
  reviews        Review[]
  variants       ProductVariant[]
  stockHistories StockHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Image {
  id          String     @id @default(uuid())
  url         String
  alt         String
  productId   String?
  userId      String?
  billBoardId String?
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  billBoards  BillBoard? @relation(fields: [billBoardId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id        String           @id @default(uuid())
  email     String
  fullName  String
  phoneNumber String
  address   String
  city      String
  district  String
  ward      String
  note      String
  status    Int
  payment   Int
  products  OrderOnProduct[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model OrderOnProduct {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  name      String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  content   String
  upVote    Int
  downVote  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  attributes Json
  price      Float
  sku        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StockHistory {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  change    Int
  createdAt DateTime @default(now())
}

model BillBoard {
  id        String   @id @default(uuid())
  title     String
  content   String
  link      String
  images    Image[]
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policy {
  id        String   @id @default(uuid())
  title     String
  content   String
  suffix    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String       @id @default(uuid())
  name      String
  members   TeamOnUser[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TeamOnUser {
  id          String   @id @default(uuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
